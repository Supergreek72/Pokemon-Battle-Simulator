//Dimitri Papadedes
//Dec 20th 2019
//choose a battle type
package pokemongui;

import java.io.FileNotFoundException;
import java.io.InputStream;
import java.net.URL;
import java.util.Scanner;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import static pokemongui.PokemonTeamBuilder.team1;

/**
 *
 * @author Dimitri Papadedes
 */
public class PokemonChooseBattle extends JFrame {

    PokemonMenu mainMenu;
    PokemonBattle battle;

    //pokemon and moves
    Pokemon[] poke;
    Move[] moves;
    //make a fake pokemon and move to fill in
    Move fakem = new Move("fake",0,0,0,"faker","lol fake");
    Pokemon fake = new Pokemon("fake", 0, 0, 0, 0, 0, 0, fakem,fakem,fakem,fakem,"", "");

    //sound 
    musicStuff buttonSound = new musicStuff();

    /**
     * Creates new form PokemonChooseBattle
     */
    public PokemonChooseBattle(PokemonMenu pm, Pokemon[] p, Move[] m) {
        initComponents();
        mainMenu = pm;
        
        moves = m;
        poke = p;

        //center
        setLocationRelativeTo(null);

        //set the icon of the frame
        URL url = PokemonMenu.class.getResource("pokeball.png");
        ImageIcon sprite = new ImageIcon(url);
        setIconImage(sprite.getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        customBtlBTN = new javax.swing.JButton();
        rndBtlBTN = new javax.swing.JButton();
        backBTN = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Pokemon Battle Simulator");
        setBackground(java.awt.Color.lightGray);

        customBtlBTN.setBackground(java.awt.Color.gray);
        customBtlBTN.setFont(new java.awt.Font("Euphemia UCAS", 1, 24)); // NOI18N
        customBtlBTN.setText("Preset Battle");
        customBtlBTN.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        customBtlBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customBtlBTNActionPerformed(evt);
            }
        });

        rndBtlBTN.setBackground(java.awt.Color.gray);
        rndBtlBTN.setFont(new java.awt.Font("Euphemia UCAS", 1, 24)); // NOI18N
        rndBtlBTN.setText("Random Battle");
        rndBtlBTN.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        rndBtlBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rndBtlBTNActionPerformed(evt);
            }
        });

        backBTN.setBackground(java.awt.Color.gray);
        backBTN.setFont(new java.awt.Font("Euphemia UCAS", 1, 18)); // NOI18N
        backBTN.setText("Back");
        backBTN.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        backBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBTNActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Euphemia UCAS", 0, 24)); // NOI18N
        jLabel1.setText("What type of battle would you like to do?");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(rndBtlBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(customBtlBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(57, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(50, 50, 50))
            .addGroup(layout.createSequentialGroup()
                .addGap(191, 191, 191)
                .addComponent(backBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(94, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(91, 91, 91)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rndBtlBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customBtlBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(61, 61, 61)
                .addComponent(backBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backBTNActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_backBTNActionPerformed
    {//GEN-HEADEREND:event_backBTNActionPerformed
        //play sound 
        buttonSound.playMusic("Pressing A Sound.wav");
        //go back
        this.setVisible(false);
        mainMenu.setVisible(true);
    }//GEN-LAST:event_backBTNActionPerformed

    private void rndBtlBTNActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rndBtlBTNActionPerformed
    {//GEN-HEADEREND:event_rndBtlBTNActionPerformed
        //play sound 
        buttonSound.playMusic("Pressing A Sound.wav");
        //stop intro music 
        mainMenu.music.stop();

        //create 2 random teams
        int rand;
        Team team = new Player_Team(fake,fake,fake,fake,fake,fake), AI = new AI_Team(fake,fake,fake,fake,fake,fake);

        
        //make a team
        for (int i = 0; i < 6; i++) {
            Pokemon pokemon = new Pokemon();
            rand = (int) (Math.random() * poke.length) + 0;

            //no dups
            while (poke[rand].getName().equals(team.getPoke(0).getName()) || poke[rand].getName().equals(team.getPoke(1).getName()) ||
                    poke[rand].getName().equals(team.getPoke(2).getName()) || poke[rand].getName().equals(team.getPoke(3).getName()) ||
                    poke[rand].getName().equals(team.getPoke(4).getName()) || poke[rand].getName().equals(team.getPoke(5).getName())) {
                rand = (int) (Math.random() * poke.length) + 0;
                
            }
        
            pokemon = poke[rand].cloneNoMoves();

            //set the pokemon
            team.setPoke(pokemon, i);

            //set moves to fake moves
            Move move[] = new Move[4];
            for (int j = 0; j < move.length; j++) {
                move[j] = fakem;
                
            }
            
            //make another random number to pick moves
            for (int j = 0; j < 4; j++) {
                
                //random number
                rand = (int) (Math.random() * moves.length) + 0;
                move[j] = moves[rand].clone();
                
                
                
                //no dups 
                while (moves[rand].getName().equals(move[0].getName()) || moves[rand].getName().equals(move[1].getName()) ||
                    moves[rand].getName().equals(move[2].getName()) || moves[rand].getName().equals(move[3].getName())) {
                    rand = (int) (Math.random() * moves.length) + 0;
                }
                
                //make sure a pokemon always has one move of their type
                while(!move[0].getType().equals(team.getPoke(i).getType1())){
                    rand = (int) (Math.random() * moves.length) + 0;
                    move[0] = moves[rand].clone();
                }
                
                move[j] = moves[rand].clone();
                //set the moves
                team.getPoke(i).setMove(move[j], j + 1);
            }

        }
        //set the first to the battling pokemon
        team.setBattling(0);

        //make ai team
        for (int i = 0; i < 6; i++) {
            Pokemon pokemon = new Pokemon();
            rand = (int) (Math.random() * poke.length) + 0;

          
            //no dups
            while (poke[rand].getName().equals(AI.getPoke(0).getName()) || poke[rand].getName().equals(AI.getPoke(1).getName()) ||
                    poke[rand].getName().equals(AI.getPoke(2).getName()) || poke[rand].getName().equals(AI.getPoke(3).getName()) ||
                    poke[rand].getName().equals(AI.getPoke(4).getName()) || poke[rand].getName().equals(AI.getPoke(5).getName())) {
                rand = (int) (Math.random() * poke.length) + 0;
            }
            
            

            pokemon = poke[rand].cloneNoMoves();

            //set the pokemon
            AI.setPoke(pokemon, i);
            
            //set moves to fake moves
            Move move[] = new Move[4];
            for (int j = 0; j < move.length; j++) {
                move[j] = fakem;
                
            }
            //make another random number to pick moves
            for (int j = 0; j < 4; j++) {
                rand = (int) (Math.random() * moves.length) + 0;

                move[j] = moves[rand].clone();
                //no dups 
                while (moves[rand].getName().equals(move[0].getName()) || moves[rand].getName().equals(move[1].getName()) ||
                    moves[rand].getName().equals(move[2].getName()) || moves[rand].getName().equals(move[3].getName())) {
                    rand = (int) (Math.random() * moves.length) + 0;
                }

                //make sure a pokemon always has one move of their type
                while(!move[0].getType().equals(AI.getPoke(i).getType1())){
                    rand = (int) (Math.random() * moves.length) + 0;
                    move[0] = moves[rand].clone();
                }
                
                move[j] = moves[rand].clone();

                //set the moves
                AI.getPoke(i).setMove(move[j], j + 1);
                
            }

        }
        //set the first to the battling pokemon
        AI.setBattling(0);

        //swap screens
        battle = new PokemonBattle(this, mainMenu, (AI_Team) AI, (Player_Team) team);

        battle.setVisible(true);

        this.setVisible(false);
    }//GEN-LAST:event_rndBtlBTNActionPerformed

    private void customBtlBTNActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_customBtlBTNActionPerformed
    {//GEN-HEADEREND:event_customBtlBTNActionPerformed
        //play sound 
        buttonSound.playMusic("Pressing A Sound.wav");
        //stop intro music 
        mainMenu.music.stop();
        
        //create a random team
        int rand;
        Team AI = new AI_Team(fake,fake,fake,fake,fake,fake);
        
        //make ai team
        for (int i = 0; i < 6; i++) {
            Pokemon pokemon = new Pokemon();
            rand = (int) (Math.random() * poke.length) + 0;

          
            //no dups
            while (poke[rand].getName().equals(AI.getPoke(0).getName()) || poke[rand].getName().equals(AI.getPoke(1).getName()) ||
                    poke[rand].getName().equals(AI.getPoke(2).getName()) || poke[rand].getName().equals(AI.getPoke(3).getName()) ||
                    poke[rand].getName().equals(AI.getPoke(4).getName()) || poke[rand].getName().equals(AI.getPoke(5).getName())) {
                rand = (int) (Math.random() * poke.length) + 0;
            }

            pokemon = poke[rand].cloneNoMoves();

            //set the pokemon
            AI.setPoke(pokemon, i);
            
            //set moves to fake moves
            Move move[] = new Move[4];
            for (int j = 0; j < move.length; j++) {
                move[j] = fakem;
                
            }
            //make another random number to pick moves
            for (int j = 0; j < 4; j++) {
                rand = (int) (Math.random() * moves.length) + 0;

                move[j] = moves[rand].clone();
                //no dups 
                while (moves[rand].getName().equals(move[0].getName()) || moves[rand].getName().equals(move[1].getName()) ||
                    moves[rand].getName().equals(move[2].getName()) || moves[rand].getName().equals(move[3].getName())) {
                    rand = (int) (Math.random() * moves.length) + 0;
                }

                //make sure a pokemon always has one move of their type
                while(!move[0].getType().equals(AI.getPoke(i).getType1())){
                    rand = (int) (Math.random() * moves.length) + 0;
                    move[0] = moves[rand].clone();
                }
                
                
                move[j] = moves[rand].clone();

                //set the moves
                AI.getPoke(i).setMove(move[j], j + 1);
                
            }

        }
        //set the first to the battling pokemon
        AI.setBattling(0);
        
        Team team = new Player_Team(fake,fake,fake,fake,fake,fake);
        
        //read the team file
        try{
            team1 = PokemonTeamBuilder.class.getResourceAsStream("team1.txt");
            
            Scanner theScanner = new Scanner(team1);
            Pokemon[] pokemon = new Pokemon[6];
            Move[] m = new Move[4];
            
            //set all the pokemon
            for (int i = 0; i < pokemon.length; i++) {
                pokemon[i] = fake;
            }
            
            //set all the moves
            for (int i = 0; i < m.length; i++) {
                m[i] = fakem;
            }
            
            
            int count = 0;
            String name = "",mName = "";
            
            //loop
            while(theScanner.hasNextLine()){
                name = theScanner.nextLine();
                //scan the name in
                pokemon[count].setName(name);
                
                for (int i = 0; i < poke.length; i++) {
                    //set the pokemons stats 
                    if(pokemon[count].getName().equals(poke[i].getName())){
                        pokemon[count] = poke[i].cloneNoMoves();
                    }
                    
                }
                
                
                for (int j = 0; j < 4; j++) {
                    mName = theScanner.nextLine();
                    m[j].setName(mName);
                    for (int i = 0; i < moves.length; i++) {
                    //set the moves 
                    if(m[j].getName().equals(moves[i].getName())){
                        pokemon[count].setMove(moves[i].clone(), j +1);
                      
                    }
                        
                }
                    
                }
                team.setPoke(pokemon[count], count);
                count++;
            }
                team.setBattling(0);
            
            
            
        }catch(ArrayIndexOutOfBoundsException e){
            System.out.println(e);
            //load image
                URL url = PokemonMenu.class.getResource("pokeball.png");
                ImageIcon sprite = new ImageIcon(url);
                
                JOptionPane.showMessageDialog(null, "Please make sure you have a team made", "Error", JOptionPane.INFORMATION_MESSAGE, sprite);
        }
        
        //swap screens
       
            if(team.getPoke(5).getName() == "fake" ||team.getPoke(0).getName() == "fake" ||team.getPoke(1).getName() == "fake" ||
                    team.getPoke(2).getName() == "fake" ||team.getPoke(3).getName() == "fake" ||
                    team.getPoke(4).getName() == "fake" ||team.getPoke(5).getName() == "fake" ){
                URL url = PokemonMenu.class.getResource("pokeball.png");
                ImageIcon sprite = new ImageIcon(url);
                 JOptionPane.showMessageDialog(null, "Please make sure you have a team made", "Error", JOptionPane.INFORMATION_MESSAGE, sprite);
            }else{
                 battle = new PokemonBattle(this, mainMenu,(AI_Team) AI, (Player_Team) team);
                 battle.setVisible(true);
                 this.setVisible(false);
            }
          
        
        

        
    }//GEN-LAST:event_customBtlBTNActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBTN;
    private javax.swing.JButton customBtlBTN;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton rndBtlBTN;
    // End of variables declaration//GEN-END:variables
}
